#!/usr/bin/env node

const cli = require('commander');
const glob = require('globby');

require('../lib/hooks');
const runner = require('../lib/runner');
const { description, version } = require('../package.json');
const log = require('../lib/logger');
const reporters = require('../lib/reporters');

cli.version(version)
  .description(description)
  .usage('[path]')
  .option('-l, --level <level>', 'Set the log level. Defaults to info')
  .option('-r, --reporter <reporter>', 'Define the reporter to use. Defaults to stdterm')
  .option('-o, --out <file>', 'Set the output file. Will overwrite. Defaults to benchmarks.html')
  .option('-s, --setup <file>', 'Path to the global setup file')
  .parse(process.argv);

const pattern = cli.args[0] || 'bench/';
const setup = cli.setup || 'bench/setup.js';
const reporter = cli.reporter || 'default';
const output = cli.out;
const logLevel = cli.level || 'info';
log.setLevel(logLevel);

log.debug(`Looking for global setup file here: ${setup}`);

glob(setup, { realpath: true })
  .then((paths) => {
    if (paths[0]) {
      log.debug('Generate Setup Suite');
      return require(paths[0]); // eslint-disable-line global-require, import/no-dynamic-require
    }
    log.debug('No global setup suite found');
    return undefined;
  })
  .then(() => glob([pattern, `!${setup}`], { realpath: true }))
  .then((paths) => {
    log.debug('Found test files: {blue:[}{yellow:%s}{blue:]}', paths.toString());
    return paths;
  })
  // eslint-disable-next-line global-require, import/no-dynamic-require
  .then(paths => paths.map(file => require(file)))
  .then(() => runner.run(reporters.getReporter(reporter, output)));

